import logging
import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.types.reply_keyboard import KeyboardButton


API_TOKEN = '5611755208:AAEhMQAMR2lmGAS1uNH1AGkW0EUeoMoUfZA'
# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text='–í—Å–µ —Ç—Ä–µ–∫–∏ –°–∫–∞–ª–ª–∏ –ú–∏–ª–∞–Ω–æ'),
            types.KeyboardButton(text='–¢–æ–ø-10 —á–∞—Ä—Ç Genius'),
            types.KeyboardButton(text='–í—ã–±—Ä–∞—Ç—å —Å–≤–æ–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è')
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder='–ú–Ω–µ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –≤–∞—à –ª—é–±–∏–º—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'
    )

    await message.answer('–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?', reply_markup=keyboard)

    """
    This handler will be called when user sends `/start` or `/help` command
    """
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥–∞:\n/milano_songs\n/chart_top10\n/dice")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /milano_songs
@dp.message_handler(commands=["milano_songs"])
async def cmd_test1(message: types.Message):
    url = "https://genius-song-lyrics1.p.rapidapi.com/artists/2040265/songs"

    querystring = {"sort":"title","per_page":"20","page":"1"}

    headers = {
        "X-RapidAPI-Key": "d8a2b24394msh530522f623e5ebcp1dff13jsn3401538088fc",
        "X-RapidAPI-Host": "genius-song-lyrics1.p.rapidapi.com"
    }

    response = requests.request("GET", url, headers=headers, params=querystring)

    jsonData = response.json()['response']

    result = []

    await message.answer("–í—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ç—Ä–µ–∫–æ–≤ –°–∫–∞–ª–ª–∏ –ú–∏–ª–∞–Ω–æ!!")

    for data in jsonData['songs']:
        result.append('genius.com' + data['api_path'])
    await message.reply('\n'.join(result))
    



# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /charts
@dp.message_handler(commands=['chart_top10'])
async def cmd_test2(message: types.Message):
    url = "https://genius-song-lyrics1.p.rapidapi.com/songs/chart"

    querystring = {"time_period":"day","chart_genre":"all","per_page":"10","page":"1"}

    headers = {
        "X-RapidAPI-Key": "d8a2b24394msh530522f623e5ebcp1dff13jsn3401538088fc",
        "X-RapidAPI-Host": "genius-song-lyrics1.p.rapidapi.com"
    }

    response = requests.request("GET", url, headers=headers, params=querystring)

    jsonData = response.json()['response']

    await message.answer("–¢–æ–ø 10 —á–∞—Ä—Ç Genius")

    result = []
    
    for data in jsonData['chart_items']:
        result.append(data['item']['full_title'])
    await message.answer('\n'.join(result))


@dp.message_handler(Text(text="–í—Å–µ —Ç—Ä–µ–∫–∏ –°–∫–∞–ª–ª–∏ –ú–∏–ª–∞–Ω–æ"))
async def scally_tracks(message: types.Message):
    await message.answer("–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä! –í–≤–µ–¥–∏ /milano_songs")


@dp.message_handler(commands=["dice"])
async def cmd_dice(message: types.Message):
    await message.answer("–ï—Å–ª–∏ –≤—ã–ø–∞–ª–æ 3 - —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª")
    await message.answer_dice(emoji="üé≤ ")

@dp.message_handler(commands=['lovely_artist'])
async def my_lovely_artist(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è')

@dp.message_handler(commands=['artists_chart'])
async def artists_chart(message: types.Message):
    url = "https://genius-song-lyrics1.p.rapidapi.com/artists/chart"

    querystring = {"time_period":"day","per_page":"10","page":"1"}

    headers = {
        "X-RapidAPI-Key": "d8a2b24394msh530522f623e5ebcp1dff13jsn3401538088fc",
        "X-RapidAPI-Host": "genius-song-lyrics1.p.rapidapi.com"
    }

    response = requests.request("GET", url, headers=headers, params=querystring)

    jsonData = response.json()['response']
    for data in jsonData['chart_items']:
        print(data['item'])


@dp.message_handler()
async def echo(message: types.Message):
    # old style:
    # await bot.send_message(message.chat.id, message.text)

    await message.answer(message.text)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)